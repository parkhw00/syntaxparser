
__predefined
{
	picture_start_code	= __const, __bit_length (32), 0x100;
	slice_start_code	= __const, __bit_length (32), 0x101 through 0x1af;
	reserved_B0		= __const, __bit_length (32), 0x1b0;
	reserved_B1		= __const, __bit_length (32), 0x1b1;
	user_data_start_code	= __const, __bit_length (32), 0x1b2;
	sequence_header_code	= __const, __bit_length (32), 0x1b3;
	sequence_error_code	= __const, __bit_length (32), 0x1b4;
	extension_start_code	= __const, __bit_length (32), 0x1b5;
	reserved_B6		= __const, __bit_length (32), 0x1b6;
	sequence_end_code	= __const, __bit_length (32), 0x1b7;
	group_start_code	= __const, __bit_length (32), 0x1b8;
	system_start_codes	= __const, __bit_length (32), 0x1b9 through 0x1ff;

	next_start_code		= __no_print;
	bytealigned		= __no_print;
	nextbits		= __no_print;
	slice			= __no_print;
	/*picture_data		= __no_print;*/

	f_code			= __array_data_type_byte, __array_size (2, 2);

	vertical_size		= 0/*__vertical_size ()*/;
}

__vertical_size ()
{
	if (__stream_defined ("sequence_extension"))
		return (sequence_header.vertical_size_value +
			(sequence_extension.vertical_size_extension*1024*4))
	else
		return (sequence_header.vertical_size_value)
}

start_parser()
{
	video_sequence ()
}

next_start_code() {
	while ( !bytealigned() )
		mpeg2_bitsdesc (zero_bit, 1, "0")
	while ( nextbits() != "0000 0000 0000 0000 0000 0001" )
		mpeg2_bitsdesc (zero_byte, 8, "0000 0000")
}

video_sequence() {
	next_start_code()
	sequence_header()
	if ( nextbits() == extension_start_code ) {
		sequence_extension()
		do {
			extension_and_user_data( 0 )
			do {
				if (nextbits() == group_start_code) {
					group_of_pictures_header()
					extension_and_user_data( 1 )
				}
				picture_header()
				picture_coding_extension()
				extension_and_user_data( 2 )
				picture_data()
			} while ( (nextbits() == picture_start_code) ||
				(nextbits() == group_start_code) )
			if ( nextbits() != sequence_end_code ) {
				sequence_header()
				sequence_extension()
			}
		} while ( nextbits() != sequence_end_code )
	} else {
		
	}
	mpeg2_bitsdesc (sequence_end_code, 32, bslbf)
}

sequence_header() {
	mpeg2_bitsdesc (sequence_header_code, 32, bslbf)
	mpeg2_bitsdesc (horizontal_size_value, 12, uimsbf)
	mpeg2_bitsdesc (vertical_size_value, 12, uimsbf)
	mpeg2_bitsdesc (aspect_ratio_information, 4, uimsbf)
	mpeg2_bitsdesc (frame_rate_code, 4, uimsbf)
	mpeg2_bitsdesc (bit_rate_value, 18, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (vbv_buffer_size_value, 10, uimsbf)
	mpeg2_bitsdesc (constrained_parameters_flag, 1, bslbf)
	mpeg2_bitsdesc (load_intra_quantiser_matrix, 1, uimsbf)
	if ( load_intra_quantiser_matrix )
		mpeg2_bitsdesc (intra_quantiser_matrix[64], 8*64, uimsbf)
	mpeg2_bitsdesc (load_non_intra_quantiser_matrix, 1, uimsbf)
	if ( load_non_intra_quantiser_matrix )
		mpeg2_bitsdesc (non_intra_quantiser_matrix[64], 8*64, uimsbf)
	next_start_code()
}

extension_and_user_data( i ) {
	while ( ( nextbits()== extension_start_code ) ||
	( nextbits()== user_data_start_code ) ) {
		if ( ( i != 1) && ( nextbits()== extension_start_code ) )
			extension_data( i )
		if ( nextbits()== user_data_start_code )
			user_data()
	}
}

extension_data( i ) {
	while ( nextbits()== extension_start_code ) {
		mpeg2_bitsdesc (extension_start_code, 32, bslbf)
		if (i == 0) { 
			if ( nextbits()== “Sequence Display Extension ID” )
				sequence_display_extension()
			else
				sequence_scalable_extension()
		}
		/* NOTE - i never takes the value 1 because extension_data()
		never follows a group_of_pictures_header() */
		if (i == 2) { 
			if ( nextbits() == “Quant Matrix Extension ID” )
				quant_matrix_extension()
			else if ( nextbits() == “Copyright Extension ID” )
				copyright_extension()
			else if ( nextbits() == “Picture Display Extension ID” )
				picture_display_extension()
			else if ( nextbits()
				== “Picture Spatial Scalable Extension ID” )
			picture_spatial_scalable_extension()
			else
				picture_temporal_scalable_extension()
		}
	}
}

user_data() {
	mpeg2_bitsdesc (user_data_start_code, 32, bslbf)
	while( nextbits() != "0000 0000 0000 0000 0000 0001" ) {
		mpeg2_bitsdesc (user_data, 8, uimsbf)
	}
	next_start_code()
}

sequence_extension() {
	mpeg2_bitsdesc (extension_start_code, 32, bslbf)
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (profile_and_level_indication, 8, uimsbf)
	mpeg2_bitsdesc (progressive_sequence, 1, uimsbf)
	mpeg2_bitsdesc (chroma_format, 2, uimsbf)
	mpeg2_bitsdesc (horizontal_size_extension, 2, uimsbf)
	mpeg2_bitsdesc (vertical_size_extension, 2, uimsbf)
	mpeg2_bitsdesc (bit_rate_extension, 12, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (vbv_buffer_size_extension, 8, uimsbf)
	mpeg2_bitsdesc (low_delay, 1, uimsbf)
	mpeg2_bitsdesc (frame_rate_extension_n, 2, uimsbf)
	mpeg2_bitsdesc (frame_rate_extension_d, 5, uimsbf)
	next_start_code()
}

sequence_display_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (video_format, 3, uimsbf)
	mpeg2_bitsdesc (colour_description, 1, uimsbf)
	if ( colour_description ) {
		mpeg2_bitsdesc (colour_primaries, 8, uimsbf)
		mpeg2_bitsdesc (transfer_characteristics, 8, uimsbf)
		mpeg2_bitsdesc (matrix_coefficients, 8, uimsbf)
	}
	mpeg2_bitsdesc (display_horizontal_size, 14, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (display_vertical_size, 14, uimsbf)
	next_start_code()
}

sequence_scalable_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (scalable_mode, 2, uimsbf)
	mpeg2_bitsdesc (layer_id, 4, uimsbf)
	if (scalable_mode == “spatial scalability”) {
		mpeg2_bitsdesc (lower_layer_prediction_horizontal_size, 14, uimsbf)
		mpeg2_bitsdesc (marker_bit, 1, bslbf)
		mpeg2_bitsdesc (lower_layer_prediction_vertical_size, 14, uimsbf)
		mpeg2_bitsdesc (horizontal_subsampling_factor_m, 5, uimsbf)
		mpeg2_bitsdesc (horizontal_subsampling_factor_n, 5, uimsbf)
		mpeg2_bitsdesc (vertical_subsampling_factor_m, 5, uimsbf)
		mpeg2_bitsdesc (vertical_subsampling_factor_n, 5, uimsbf)
	}
	if ( scalable_mode == “temporal scalability” ) {
		mpeg2_bitsdesc (picture_mux_enable, 1, uimsbf)
		if ( picture_mux_enable )
			mpeg2_bitsdesc (mux_to_progressive_sequence, 1, uimsbf)
		mpeg2_bitsdesc (picture_mux_order, 3, uimsbf)
		mpeg2_bitsdesc (picture_mux_factor, 3, uimsbf)
	}
	next_start_code()
}

group_of_pictures_header() {
	mpeg2_bitsdesc (group_start_code, 32, bslbf)
	mpeg2_bitsdesc (time_code, 25, bslbf)
	mpeg2_bitsdesc (closed_gop, 1, uimsbf)
	mpeg2_bitsdesc (broken_link, 1, uimsbf)
	next_start_code()
}

picture_header() {
	mpeg2_bitsdesc (picture_start_code, 32, bslbf)
	mpeg2_bitsdesc (temporal_reference, 10, uimsbf)
	mpeg2_bitsdesc (picture_coding_type, 3, uimsbf)
	mpeg2_bitsdesc (vbv_delay, 16, uimsbf)
	if ( picture_coding_type == 2 || picture_coding_type == 3) {
		mpeg2_bitsdesc (full_pel_forward_vector, 1, bslbf)
		mpeg2_bitsdesc (forward_f_code, 3, bslbf)
	}
	if ( picture_coding_type == 3 ) {
		mpeg2_bitsdesc (full_pel_backward_vector, 1, bslbf)
		mpeg2_bitsdesc (backward_f_code, 3, bslbf)
	}
	while ( nextbits() == "1" ) {
		mpeg2_bitsdesc (extra_bit_picture, 1, uimsbf)
		mpeg2_bitsdesc (extra_information_picture, 8, uimsbf)
	}
	mpeg2_bitsdesc (extra_bit_picture, 1, uimsbf)
	next_start_code()
}

picture_coding_extension() {
	mpeg2_bitsdesc (extension_start_code, 32, bslbf)
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (f_code[0][0], 4, uimsbf)
	mpeg2_bitsdesc (f_code[0][1], 4, uimsbf)
	mpeg2_bitsdesc (f_code[1][0], 4, uimsbf)
	mpeg2_bitsdesc (f_code[1][1], 4, uimsbf)
	mpeg2_bitsdesc (intra_dc_precision, 2, uimsbf)
	mpeg2_bitsdesc (picture_structure, 2, uimsbf)
	mpeg2_bitsdesc (top_field_first, 1, uimsbf)
	mpeg2_bitsdesc (frame_pred_frame_dct, 1, uimsbf)
	mpeg2_bitsdesc (concealment_motion_vectors, 1, uimsbf)
	mpeg2_bitsdesc (q_scale_type, 1, uimsbf)
	mpeg2_bitsdesc (intra_vlc_format, 1, uimsbf)
	mpeg2_bitsdesc (alternate_scan, 1, uimsbf)
	mpeg2_bitsdesc (repeat_first_field, 1, uimsbf)
	mpeg2_bitsdesc (chroma_420_type, 1, uimsbf)
	mpeg2_bitsdesc (progressive_frame, 1, uimsbf)
	mpeg2_bitsdesc (composite_display_flag, 1, uimsbf)
	if ( composite_display_flag ) {
		mpeg2_bitsdesc (v_axis, 1, uimsbf)
		mpeg2_bitsdesc (field_sequence, 3, uimsbf)
		mpeg2_bitsdesc (sub_carrier, 1, uimsbf)
		mpeg2_bitsdesc (burst_amplitude, 7, uimsbf)
		mpeg2_bitsdesc (sub_carrier_phase, 8, uimsbf)
	}
	next_start_code()
}

quant_matrix_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (load_intra_quantiser_matrix, 1, uimsbf)
	if ( load_intra_quantiser_matrix )
		mpeg2_bitsdesc (intra_quantiser_matrix[64], 8 * 64, uimsbf)
	mpeg2_bitsdesc (load_non_intra_quantiser_matrix, 1, uimsbf)
	if ( load_non_intra_quantiser_matrix )
		mpeg2_bitsdesc (non_intra_quantiser_matrix[64], 8 * 64, uimsbf)
	mpeg2_bitsdesc (load_chroma_intra_quantiser_matrix, 1, uimsbf)
	if ( load_chroma_intra_quantiser_matrix )
		mpeg2_bitsdesc (chroma_intra_quantiser_matrix[64], 8 * 64, uimsbf)
	mpeg2_bitsdesc (load_chroma_non_intra_quantiser_matrix, 1, uimsbf)
	if ( load_chroma_non_intra_quantiser_matrix )
		mpeg2_bitsdesc (chroma_non_intra_quantiser_matrix[64], 8 * 64, uimsbf)
	next_start_code()
}

picture_display_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	for ( i=0; i<number_of_frame_centre_offsets; i++ ) {
		mpeg2_bitsdesc (frame_centre_horizontal_offset, 16, simsbf)
		mpeg2_bitsdesc (marker_bit, 1, bslbf)
		mpeg2_bitsdesc (frame_centre_vertical_offset, 16, simsbf)
		mpeg2_bitsdesc (marker_bit, 1, bslbf)
	}
	next_start_code()
}

picture_temporal_scalable_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (reference_select_code, 2, uimsbf)
	mpeg2_bitsdesc (forward_temporal_reference, 10, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (backward_temporal_reference, 10, uimsbf)
	next_start_code()
}

picture_spatial_scalable_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (lower_layer_temporal_reference, 10, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (lower_layer_horizontal_offset, 15, simsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (lower_layer_vertical_offset, 15, simsbf)
	mpeg2_bitsdesc (spatial_temporal_weight_code_table_index, 2, uimsbf)
	mpeg2_bitsdesc (lower_layer_progressive_frame, 1, uimsbf)
	mpeg2_bitsdesc (lower_layer_deinterlaced_field_select, 1, uimsbf)
	next_start_code()
}

copyright_extension() {
	mpeg2_bitsdesc (extension_start_code_identifier, 4, uimsbf)
	mpeg2_bitsdesc (copyright_flag, 1, bslbf)
	mpeg2_bitsdesc (copyright_identifier, 8, uimsbf)
	mpeg2_bitsdesc (original_or_copy, 1, bslbf)
	mpeg2_bitsdesc (reserved, 7, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (copyright_number_1, 20, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (copyright_number_2, 22, uimsbf)
	mpeg2_bitsdesc (marker_bit, 1, bslbf)
	mpeg2_bitsdesc (copyright_number_3, 22, uimsbf)
	next_start_code()
}

picture_data() {
	do {
		slice()
	} while ( nextbits() == slice_start_code )
		next_start_code()
}

slice() {
	mpeg2_bitsdesc (slice_start_code, 32, bslbf)
	if (vertical_size > 2800)
		mpeg2_bitsdesc (slice_vertical_position_extension, 3, uimsbf)
	if (__stream_defined ("sequence_scalable_extension")) {
		if (scalable_mode == “data partitioning” )
			mpeg2_bitsdesc (priority_breakpoint, 7, uimsbf)
	}
	mpeg2_bitsdesc (quantiser_scale_code, 5, uimsbf)
	if ( nextbits() == "1" ) {
		mpeg2_bitsdesc (intra_slice_flag, 1, bslbf)
		mpeg2_bitsdesc (intra_slice, 1, uimsbf)
		mpeg2_bitsdesc (reserved_bits, 7, uimsbf)
		while ( nextbits() == "1" ) {
			mpeg2_bitsdesc (extra_bit_slice, 1, uimsbf)
			mpeg2_bitsdesc (extra_information_slice, 8, uimsbf)
		}
	}
	mpeg2_bitsdesc (extra_bit_slice, 1, uimsbf)
	do {
		next_start_code()
	} while ( nextbits() != "000 0000 0000 0000 0000 0000" )
		next_start_code()
}

macroblock() {
	while ( nextbits() == "0000 0001 000" )
		mpeg2_bitsdesc (macroblock_escape, 11, bslbf)
	mpeg2_bitsdesc (macroblock_address_increment, 1-11, vlclbf)
	macroblock_modes()
	if ( macroblock_quant )
		mpeg2_bitsdesc (quantiser_scale_code, 5, uimsbf)
	if ( macroblock_motion_forward ||
		( macroblock_intra && concealment_motion_vectors) )
	motion_vectors( 0 )
	if ( macroblock_motion_backward )
		motion_vectors( 1 )
	if ( macroblock_intra && concealment_motion_vectors)
		mpeg2_bitsdesc (marker_bit, 1, bslbf)
	if ( macroblock_pattern )
		coded_block_pattern()
	for ( i=0; i<block_count; i++ ) {
		block( i )
	}
}

macroblock_modes() {
	mpeg2_bitsdesc (macroblock_type, 1-9, vlclbf)
	if ( ( spatial_temporal_weight_code_flag == 1 ) &&
	( spatial_temporal_weight_code_table_index != "00") ) {
		mpeg2_bitsdesc (spatial_temporal_weight_code, 2, uimsbf)
	}
	if ( macroblock_motion_forward ||
	macroblock_motion_backward ) {
		if ( picture_structure == "frame" ) {
			if ( frame_pred_frame_dct == 0 )
				mpeg2_bitsdesc (frame_motion_type, 2, uimsbf)
		} else {
			mpeg2_bitsdesc (field_motion_type, 2, uimsbf)
		}
	}
	if ( ( picture_structure == “Frame picture” ) &&
		( frame_pred_frame_dct == 0 ) &&
	( macroblock_intra || macoblock_pattern) ){
		mpeg2_bitsdesc (dct_type, 1, uimsbf)
	}
}

motion_vectors ( s ) {
	if ( motion_vector_count == 1 ) {
		if (( mv_format == field ) && ( dmv != 1))
			mpeg2_bitsdesc (motion_vertical_field_select[0][s], 1, uimsbf)
		motion_vector( 0, s )
	} else {
		mpeg2_bitsdesc (motion_vertical_field_select[0][s], 1, uimsbf)
		motion_vector( 0, s )
		mpeg2_bitsdesc (motion_vertical_field_select[1][s], 1, uimsbf)
		motion_vector(1, s )
	}
}

motion_vector ( r, s ) {
	mpeg2_bitsdesc (motion_code[r][s][0], 1-11, vlclbf)
	if ( ( f_code[s][0] != 1) && ( motion_code[r][s][0] != 0 ) )
		mpeg2_bitsdesc (motion_residual[r][s][0], 1-8, uimsbf)
	if (dmv == 1)
		mpeg2_bitsdesc (dmvector[0], 1-2, vlclbf)
	mpeg2_bitsdesc (motion_code[r][s][1], 1-11, vlclbf)
	if ( ( f_code[s][1] != 1) && ( motion_code[r][s][1] != 0 ) )
		mpeg2_bitsdesc (motion_residual[r][s][1], 1-8, uimsbf)
	if (dmv == 1)
		mpeg2_bitsdesc (dmvector[1], 1-2, vlclbf)
}

coded_block_pattern () {
	mpeg2_bitsdesc (coded_block_pattern_420, 3-9, vlclbf)
	if ( chroma_format == 4:2:2 )
		mpeg2_bitsdesc (coded_block_pattern_1, 2, uimsbf)
	if ( chroma_format == 4:4:4 )
		mpeg2_bitsdesc (coded_block_pattern_2, 6, uimsbf)
}

block( i ) {
	if ( pattern_code[i] ) {
		if ( macroblock_intra ) {
			if ( i<4 ) {
				mpeg2_bitsdesc (dct_dc_size_luminance, 2-9, vlclbf)
				if(dct_dc_size_luminance != 0)
					mpeg2_bitsdesc (dct_dc_differential, 1-11, uimsbf)
			} else {
				mpeg2_bitsdesc (dct_dc_size_chrominance, 2-10, vlclbf)
				if(dct_dc_size_chrominance !=0)
					mpeg2_bitsdesc (dct_dc_differential, 1-11, uimsbf)
			}
		} else {
			mpeg2_bitsdesc (first_dct_coefficient, 2-24, uimsbf)
		}
		while ( nextbits() != end_of_block )
			mpeg2_bitsdesc (subsequent_dct_coefficient, 3-24, uimsbf)
		mpeg2_bitsdesc (end_of_block, 2 or 4, vlclbf)
	}
}

